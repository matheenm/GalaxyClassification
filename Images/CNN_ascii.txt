 # --------------------------------------------------------------
 # Convolutional Neural Network (CNN) Architecture
 #
 # Input
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin= 3, cout= 64, k= 9, str= 1, pad= 1)   │
 # │ → BN → ReLU → MaxPool2d(k= 2, str= 2)             │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin= 64, cout= 128, k= 5, str= 1, pad= 1) │
 # │ → BN → ReLU → MaxPool2d(k= 2, str= 2)             │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin= 128, cout= 256, k= 3, str= 1, pad= 1)│
 # │ → BN → ReLU → MaxPool2d(k= 2, str= 2)             │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin=256, cout=512, k= 1, str= 1, padd= 1) │
 # │ → BN → ReLU → MaxPool2d(k= 2, str= 2)             │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # Flatten (to 1‑D vector)
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Linear (fin= 8192, fout= 1024)                    │
 # │ → Dropout → ReLU 								   │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Linear (fin= 1024, fout= 2048)                    │
 # │ → Dropout → ReLU 								   │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Linear (fin= 128, fout=NUM_CLASSES)               │
 # │ → Sigmoid      								   │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # Output
 # --------------------------------------------------------------