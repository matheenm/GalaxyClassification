 # --------------------------------------------------------------
 # Convolutional Neural Network (CNN) Architecture
 #
 # Input
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin= 3, cout= 16, kernel_size= 3, stride= 1, padding= 1) │
 # │ → ReLU → MaxPool2d(kernel_size= 2, stride= 2) │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin= 16, cout= 32, kernel_size= 3, stride= 1, padding= 1) │
 # │ → ReLU → MaxPool2d(kernel_size= 2, stride= 2) │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Conv2d (cin= 32, cout= 64, kernel_size= 3, stride= 1, padding= 1) │
 # │ → ReLU → MaxPool2d(kernel_size= 2, stride= 2) │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # Flatten (to 1‑D vector)
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Linear (fin= 64·H·W, fout= 128) │
 # │ → ReLU │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # ┌───────────────────────────────────────┐
 # │ Linear (fin= 128, fout=NUM_CLASSES) │
 # │ → Softmax (or LogSoftmax) │
 # └───────────────────────────────────────┘
 # │
 # ▼
 # Output
 # --------------------------------------------------------------